#!/usr/bin/env node
var program = require('commander');
var path = require('path');

program
  .version('0.0.1')
  .option('-b, --badge <badge id>', 'Umbo badge id.')
  .option('-k, --key <private key>', 'Umbo private key.')
  .option('-u, --url <URL to Umbo>', 'Umbo\s URL, defaults to http://umbo.zynesis.com/:badge', 'http://umbo.zynesis.com/:badge')
  .option('-j, --json-summary <path>', 'Path to json-summary reported by istanbul. Defaults to coverage/coverage-summary.json', 'coverage/coverage-summary.json')
  .option('-t, --type <type>', 'Coverage type: lines, statements, functions or branches. Defaults to lines.', /^(lines|statements|functions|branches)$/i, 'lines');

program.on('--help', function() {
  console.log('  Usage example:');
  console.log();
  console.log('    Ensure that json-summary report is generated by istanbul cover');
  console.log('    $ istanbul cover --report json-summary mocha');
  console.log();
  console.log('    Parse json-summary report and send to Umbo');
  console.log('    $ export UMBO_BADGE=YOUR_UMBO_BADGE_ID;');
  console.log('    $ export UMBO_KEY=PRIVATE_KEY; ');
  console.log('    $ umbo-istanbul');
});

program.parse(process.argv);

var summary;

try {
  summary = require(path.resolve(program.jsonSummary));
  if (!summary || !summary.total || !summary.total[program.type.toLowerCase()].pct) {
    console.error('Invalid json-summary report at ' + program.jsonSummary);
    return process.exit(1);
  }
} catch (e) {
  console.error('Invalid json-summary report at ' + program.jsonSummary);
  return process.exit(1);
}

console.log('Coverage percentage: ' + summary.total[program.type.toLowerCase()].pct + '%');

var badgeID = program.badge || process.env.UMBO_BADGE;
var key = program.key || process.env.UMBO_KEY;
if (!key || !badgeID) {
  console.error('Missing Umbo badge ID or key.');
  return process.exit(1);
}
